<script lang="ts">
	import * as Chart from "$lib/components/ui/chart/index";
	import { LineChart, Tooltip, Axis, Layer } from "layerchart";
	import { ticks } from "d3";
	import { SvelteSet } from "svelte/reactivity";

	type Props = {
		domain: [number, number];
		functions: Array<{
			id: number;
			fn: (x: number) => number;
			label?: string;
			color?: string;
		}>;
		hidden?: number[];
		tickLength?: number;
	};
	function filterNonInteger(x: string) {
		return !Number.isNaN(Number.parseInt(x));
	}
	function getChartData(x_value: number[], functions: Props["functions"]) {
		const data = [];

		for (const x of x_value) {
			const point: Record<string | number, number> = { x: x };
			for (const f of functions) {
				point[f.id] = f.fn(x);
			}
			data.push(point);
		}
		return data;
	}
	function getChartConfig(functions: Props["functions"]) {
		const config: Record<string, { label: string; color: string }> = {};
		for (const f of functions) {
			config[f.id.toString()] = {
				label: f.label ?? "",
				color: f.color ?? "",
			};
		}
		return config;
	}

	const {
		domain = $bindable(),
		functions,
		hidden = $bindable([]),
		tickLength = $bindable(1000),
	}: Props = $props();

	const x_value = $derived(ticks(domain[0], domain[1], tickLength));
	const hiddenSet = $derived(new SvelteSet(hidden));
	const filteredFunc = $derived(
		functions.filter(({ id }) => !hiddenSet.has(id)),
	);
	// show each data as x, id_1: f_id_1(x), id_2: f_id_2(x)
	const chartData: Record<number, number>[] = $derived.by(() =>
		getChartData(x_value, filteredFunc),
	);

	// each function is there with a key of id and value containing color and label
	const chartConfig = $derived.by(() => getChartConfig(functions));
</script>

<div class="w-full p-10">
	<Chart.Container config={chartConfig} class="min-h-[200px] w-full">
		<LineChart
			data={chartData}
			x="x"
			series={filteredFunc.map((f) => ({
				key: f.id.toString(),
				label: f.label,
				color: f.color,
			}))}
		>
			{#snippet tooltip({ context })}
				<Tooltip.Root class="bg-secondary text-secondary-foreground rounded">
					{#snippet children({ data })}
						<Tooltip.Header value={`x=${data.x}`}></Tooltip.Header>
						<Tooltip.List>
							{#each Object.keys(data).filter(filterNonInteger) as key}
								<Tooltip.Item>
									{chartConfig[key]?.label ?? ""}
									{data[key]}</Tooltip.Item
								>
							{/each}
						</Tooltip.List>
					{/snippet}
				</Tooltip.Root>
			{/snippet}
		</LineChart>
	</Chart.Container>
</div>
